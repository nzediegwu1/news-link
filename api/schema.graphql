type Query {
  info: String!
  feed(filter: String, first: Int, skip: Int, orderBy: LinkOrderByInput): Feed!
  getLink(id: ID!): Link
  getUsers: [User!]!
}
type Mutation {
  postLink(
    title: String!
    description: String!
    url: String!
    imageUrl: String!
  ): Link!
  updateLink(
    id: ID!
    title: String
    description: String
    url: String
    imageUrl: String
  ): Link!
  deleteLink(id: ID!): Link
  signup(name: String!, email: String!, password: String!): AuthPayload
  signin(email: String!, password: String!): AuthPayload
  vote(linkId: String!): Vote!
  deleteVote(id: ID!): VoteResponse
}
type VoteResponse {
  message: String!
  id: ID!
}
enum LinkOrderByInput {
  url_ASC
  url_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}
type Feed {
  links: [Link!]!
  count: Int!
}
type Subscription {
  newLink: Link
  newVote: Vote
}
type Link {
  id: ID!
  title: String!
  description: String!
  url: String!
  imageUrl: String!
  createdAt: DateTime!
  postedBy: User
  votes: [Vote!]!
}
type AuthPayload {
  token: String
  user: User
}
type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  links: [Link!]!
  voteCasts: [Vote!]!
}
type Vote {
  id: ID!
  voter: User
  link: Link
}
scalar DateTime
